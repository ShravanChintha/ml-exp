# Complete Kubernetes deployment for CLIP Image Analysis Application
# This includes all services: Zookeeper, Kafka, Redis, Web App, and Image Processor

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: clip-app
  labels:
    name: clip-app

---
# ConfigMap for Kafka configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: clip-app
data:
  KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
  KAFKA_TOPICS: "image-analysis,analysis-results"

---
# PersistentVolumeClaim for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clip-model-storage
  namespace: clip-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
# PersistentVolumeClaim for Kafka data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-storage
  namespace: clip-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# PersistentVolumeClaim for Zookeeper data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: zookeeper-storage
  namespace: clip-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard

---
# Zookeeper Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: clip-app
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_DATA_DIR
          value: "/var/lib/zookeeper/data"
        - name: ZOOKEEPER_LOG_DIR
          value: "/var/lib/zookeeper/log"
        volumeMounts:
        - name: zookeeper-storage
          mountPath: /var/lib/zookeeper
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "echo srvr | nc localhost 2181"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "echo srvr | nc localhost 2181"
          initialDelaySeconds: 30
          periodSeconds: 5
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: zookeeper-storage
        persistentVolumeClaim:
          claimName: zookeeper-storage

---
# Zookeeper Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: clip-app
  labels:
    app: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
  - port: 2181
    targetPort: 2181
  type: ClusterIP

---
# Kafka Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: clip-app
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
      - name: volume-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chmod -R 777 /bitnami/kafka && chown -R 1001:1001 /bitnami/kafka']
        volumeMounts:
        - name: kafka-storage
          mountPath: /bitnami/kafka
        securityContext:
          runAsUser: 0
      containers:
      - name: kafka
        image: bitnami/kafka:3.5
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_ENABLE_KRAFT
          value: "no"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_CFG_LISTENERS
          value: "PLAINTEXT://:9092"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: "1"
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_CFG_MESSAGE_MAX_BYTES
          value: "10485760"
        - name: KAFKA_CFG_REPLICA_FETCH_MAX_BYTES
          value: "10485760"
        - name: KAFKA_CFG_MAX_REQUEST_SIZE
          value: "10485760"
        volumeMounts:
        - name: kafka-storage
          mountPath: /bitnami/kafka
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 10
        resources:
          limits:
            memory: "2Gi"
            cpu: "1"
          requests:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: kafka-storage
        persistentVolumeClaim:
          claimName: kafka-storage

---
# Kafka Service
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: clip-app
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
  - name: kafka
    port: 9092
    targetPort: 9092
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: clip-app
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes"]
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            memory: "512Mi"
            cpu: "250m"
          requests:
            memory: "256Mi"
            cpu: "125m"

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: clip-app
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# CLIP Web App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clip-webapp
  namespace: clip-app
  labels:
    app: clip-webapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: clip-webapp
  template:
    metadata:
      labels:
        app: clip-webapp
    spec:
      containers:
      - name: clip-webapp
        image: clip-webapp:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: PYTHONUNBUFFERED
          value: "1"
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            memory: "2Gi"
            cpu: "1"
          requests:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: clip-model-storage

---
# CLIP Web App Service
apiVersion: v1
kind: Service
metadata:
  name: clip-webapp
  namespace: clip-app
  labels:
    app: clip-webapp
spec:
  selector:
    app: clip-webapp
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# CLIP Image Processor Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clip-processor
  namespace: clip-app
  labels:
    app: clip-processor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: clip-processor
  template:
    metadata:
      labels:
        app: clip-processor
    spec:
      containers:
      - name: clip-processor
        image: clip-processor:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: PYTHONUNBUFFERED
          value: "1"
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
        resources:
          limits:
            memory: "3Gi"
            cpu: "2"
          requests:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import sys; sys.exit(0)"
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: clip-model-storage

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: clip-app-ingress
  namespace: clip-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/websocket-services: "clip-webapp"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  ingressClassName: nginx
  rules:
  - host: clip-app.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: clip-webapp
            port:
              number: 80

---
# HorizontalPodAutoscaler for web app
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: clip-webapp-hpa
  namespace: clip-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: clip-webapp
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HorizontalPodAutoscaler for image processor
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: clip-processor-hpa
  namespace: clip-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: clip-processor
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
